/*
  IDL structure for mapistore indexing database
 */

[
 pointer_default(unique)
]
interface mapistore_indexing_db
{
	typedef [enum16bit] enum {
		MAPISTORE_INDEXING_VERSION_1	= 1
	} mapistore_indexing_version;

	typedef [enum8bit] enum {
		MAPISTORE_INDEXING_FOLDER	= 1,
		MAPISTORE_INDEXING_MESSAGE	= 2,
		MAPISTORE_INDEXING_SOFTDELETE	= 3
	} mapistore_indexing_type;

	/* TODO: Match Exchange ACLs more closely than this rough list */
	typedef [enum8bit] enum {
		MAPISTORE_ACL_NONE		= 1,
		MAPISTORE_ACL_READ		= 2,
		MAPISTORE_ACL_WRITE		= 3,
		MAPISTORE_ACL_RDWR		= 4
	} mapistore_indexing_acl_type;

	typedef [public] struct {
		[string, charset(UTF16)] uint16			*username;
		mapistore_indexing_acl_type			acl;
	} mapistore_indexing_acl;

	typedef [public] struct {
		uint16						acl_number;
		mapistore_indexing_acl				acls[acl_number];
	} mapistore_indexing_acls;

	typedef [switch_type(uint8)] union {
		[case(MAPISTORE_INDEXING_FOLDER)] mapistore_indexing_acls	acls_folder;
		[default];
	} mapistore_indexing_acls_union;

	typedef [public] struct {
		hyper	next_allocation_id;
		hyper	last_allocation_id;
	} mapistore_indexing_allocation_range;

	typedef [switch_type(uint8)] union {
		[case(MAPISTORE_INDEXING_FOLDER)] mapistore_indexing_allocation_range	range;
		[default];
	} mapistore_indexing_alloc_range_union;

	typedef [public] struct {
		[string, charset(UTF16)] uint16				*mapistoreURI;
		mapistore_indexing_type					Type;
		hyper							ParentFolderID;
		[switch_is(Type)] mapistore_indexing_alloc_range_union	MessageRangeIDs;
		[switch_is(Type)] mapistore_indexing_acls_union		Acls;
	} mapistore_indexing_info_v1;

	typedef [switch_type(uint16)] union {
		[case(MAPISTORE_INDEXING_VERSION_1)] mapistore_indexing_info_v1	mapistore_indexing_v1;
	} mapistore_indexing_info;

	typedef [public] struct {
		uint16						version;
		[switch_is(version)] mapistore_indexing_info	info;
	} mapistore_indexing_entry;
}