#!/usr/bin/perl -w
## tag2ad.pm for OpenChange
## 
## Copyright (C) Gregory Schiro
## Mail   <g.schiro@openchange.org>
## 
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.
## 
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
## 
## Started on  Wed Mar 22 19:05:28 2006 gregory schiro
## Last update Thu Mar 23 22:13:39 2006 gregory schiro
##

package tag2ad;

use	strict;

my	$content = '';

our	%hash;

my	%prop_types = (
		       0x0	=> ["PT_UNSPECIFIED", 0],
		       0x1	=> ["PT_NULL", 1],
		       0x2	=> ["PT_SHORT", 2],
		       0x3	=> ["PT_LONG", 3],
		       0x4	=> ["PT_FLOAT", 4],
		       0x5	=> ["PT_DOUBLE", 5],
		       0x6	=> ["PT_CURRENCY",6],
		       0x7	=> ["PT_APPTIME",7],
		       0xa	=> ["PT_ERROR",8],
		       0xb	=> ["PT_BOOLEAN", 9],
		       0xd	=> ["PT_OBJECT", 10],
		       0x14	=> ["PT_I8", 11],
		       0x1e	=> ["PT_STRING8", 12],
		       0x1f	=> ["PT_UNICODE", 13],
		       0x40	=> ["PT_SYSTIME", 14],
		       0x48	=> ["PT_CLSID", 15],
		       0xfd	=> ["UNKNOWN", -1],
		       0xfe	=> ["UNKNOWN", -1],
		       0x102	=> ["PT_BINARY", 16],
		       0x1002	=> ["PT_MV_SHORT", 17],
		       0x1003	=> ["PT_MV_LONG", 18],
		       0x1004	=> ["PT_MV_FLOAT", 19],
		       0x1005	=> ["PT_MV_DOUBLE", 20],
		       0x1006	=> ["PT_MV_CURRENCY", 21],
		       0x1007	=> ["PT_MV_APPTIME", 22],
		       0x1014	=> ["PT_MV_I8", 23],
		       0x101e	=> ["PT_MV_STRING8", 24],
		       0x101f	=> ["PT_MV_UNICODE", 25],
		       0x1040	=> ["PT_MV_SYSTIME", 26],
		       0x1048	=> ["PT_MV_CLSID", 27],
		       0x1102	=> ["PT_MV_BINARY", 28]
		       );

sub	print_lineNL($)
{
    $content .= shift;
    $content .= "\n";
}

sub	print_line($)
{
    $content .= shift;
}

sub	header()
{
    &print_lineNL('/* Auto-generated by '.$0.' */');
    &print_lineNL("\n");
    &print_lineNL('#include "openchange.h"');
    &print_lineNL('#include "libmapi/include/mapidefs.h"');
    &print_lineNL('#include "mapitags.h"');
    &print_lineNL("\n");
}

sub	getX500Index($)
{
    my $type = shift;
    
    if (exists($prop_types{$type})) {
	my $ref = undef;
	$ref = $prop_types{$type};
	my @tab = @$ref;

	return $tab[1];
    }

    return -1;
}

sub	add_x500($$$)
{
    my	$two = shift;
    my	$type = shift;
    my	$ad_name = shift;
    my	$id = getX500Index($type);

    if ($id >= 0) {
	$hash{$two}[$id] = $ad_name;
    }
    else {
	$hash{$two}[$id] = 0;
    }
}

sub	init_hash()
{
    my	$tmp = join ',', split '', sprintf('%030s', '');
    for (my $i = 0; $i < 0xFF; $i++) {
	eval('$hash{'.$i.'} = ['.$tmp.']');
    }
}

sub	empty_line($)
{
    my	$nb = shift;
    my	$line = '';
    my  $tmp = join ',', split '', sprintf('%0256s', '');
    my	@list;

    eval('@list = ('.$tmp.')');
    while ($nb-- > 0) {
	$line .= '{'.join(', ', @list)."},\n";
    }

    return $line;
}

sub	built_line()
{
    my	$ref = undef;
    my	$is_empty = 1;
    my	$line = '';
    my	$curr = '';
    my	@list = ();
    my	$empty = sprintf('%030s', '');

    for (my $i = 0; $i < 0xFF; $i++) {
	$ref = $hash{$i};
	if (defined($ref)) {
	    @list = @$ref;
	    $curr = join('', @list);
	    if ($curr ne $empty) {
		$line .= "\t\t{".join(', ', @list)."},\n";
		$is_empty = 0;
	    }
	    else {
		#$line .= "\t\t0,\n";
	    }
	    $ref = undef;
	}
	@list = ();
    }
    
    return "\t{\n".substr($line, 0, length($line) - 2)."\n\t},\n" if (!$is_empty);
    return "\t{ {0} },\n";
}

sub	print_functions()
{
    &print_lineNL("uint16_t get_type_index(uint16_t type)");
    &print_lineNL("{");
    &print_lineNL("\tswitch (type) {");
    &print_lineNL("\tcase PT_UNSPECIFIED :");
    &print_lineNL("\tcase PT_NULL :");
    &print_lineNL("\tcase PT_SHORT :");
    &print_lineNL("\tcase PT_LONG :");
    &print_lineNL("\tcase PT_FLOAT :");
    &print_lineNL("\tcase PT_DOUBLE :");
    &print_lineNL("\tcase PT_CURRENCY :");
    &print_lineNL("\tcase PT_APPTIME :");
    &print_lineNL("\t\treturn type;");
    &print_lineNL("\tcase PT_ERROR :");
    &print_lineNL("\t\treturn 8;");
    &print_lineNL("\tcase PT_BOOLEAN :");
    &print_lineNL("\t\treturn 9;");
    &print_lineNL("\tcase PT_OBJECT :");
    &print_lineNL("\t\treturn 10;");
    &print_lineNL("\tcase PT_I8 :");
    &print_lineNL("\t\treturn 11;");
    &print_lineNL("\tcase PT_STRING8 :");
    &print_lineNL("\t\treturn 12;");
    &print_lineNL("\tcase PT_UNICODE :");
    &print_lineNL("\t\treturn 13;");
    &print_lineNL("\tcase PT_SYSTIME :");
    &print_lineNL("\t\treturn 14;");
    &print_lineNL("\tcase PT_CLSID :");
    &print_lineNL("\t\treturn 15;");
    &print_lineNL("\tcase PT_BINARY :");
    &print_lineNL("\t\treturn 16;");
    &print_lineNL("\tcase PT_MV_SHORT :");
    &print_lineNL("\t\treturn 18;");
    &print_lineNL("\tcase PT_MV_LONG :");
    &print_lineNL("\t\treturn 19;");
    &print_lineNL("\tcase PT_MV_FLOAT :");
    &print_lineNL("\t\treturn 20;");
    &print_lineNL("\tcase PT_MV_DOUBLE :");
    &print_lineNL("\t\treturn 21;");
    &print_lineNL("\tcase PT_MV_CURRENCY :");
    &print_lineNL("\t\treturn 22;");
    &print_lineNL("\tcase PT_MV_APPTIME :");
    &print_lineNL("\t\treturn 23;");
    &print_lineNL("\tcase PT_MV_I8 :");
    &print_lineNL("\t\treturn 24;");
    &print_lineNL("\tcase PT_MV_STRING8 :");
    &print_lineNL("\t\treturn 25;");
    &print_lineNL("\tcase PT_MV_UNICODE :");
    &print_lineNL("\t\treturn 26;");
    &print_lineNL("\tcase PT_MV_SYSTIME :");
    &print_lineNL("\t\treturn 27;");
    &print_lineNL("\tcase PT_MV_CLSID :");
    &print_lineNL("\t\treturn 28;");
    &print_lineNL("\tcase PT_MV_BINARY :");
    &print_lineNL("\t\treturn 29;");
    &print_lineNL("\tdefault :");
    &print_lineNL("\t\tbreak;");
    &print_lineNL("\t}");
    &print_lineNL('');
    &print_lineNL("\treturn 0xFF;");
    &print_lineNL("}");
    &print_lineNL('');

    &print_lineNL("uint8_t get_line_index(uint8_t line)");
    &print_lineNL("{");
    &print_lineNL("\treturn tab_index[line];");
    &print_lineNL("}");
    &print_lineNL('');

    &print_lineNL("const char *get_ad_name(uint32_t mapitag)");
    &print_lineNL("{");
    &print_lineNL("\tuint8_t		line;");
    &print_lineNL("\tuint8_t		col;");
    &print_lineNL("\tuint16_t	type;");
    &print_lineNL("\tuint16_t	i;");
    &print_lineNL("");
    &print_lineNL("\tline = (mapitag >> 24) & 0xFF;");
    &print_lineNL("\tcol = (mapitag >> 16) & 0xFF;");
    &print_lineNL("\ttype = mapitag & 0xFFFF;");
    &print_lineNL("");
    &print_lineNL("\tif ((i = get_type_index(type)) != 0xFF) {");
    &print_lineNL("\t\tline = get_line_index(line);");
    &print_lineNL("\t\treturn tag_to_x500[line][col][i];");
    &print_lineNL("\t}");
    &print_lineNL("");
    &print_lineNL("\treturn NULL;");
    &print_lineNL("}");
    &print_lineNL('');
}

sub	tab_index(@)
{
    my	@tab = @_;

    &print_lineNL("uint16_t\ttab_index[256] = {");
    &print_lineNL("".join ', ', @tab);
    &print_lineNL("};\n");
}

sub	tab_name()
{
    my	@tmp = split /\n/, $content;
    my	@lines = sort @tmp;
    my	$prev_one = 0x0;
    my	$prev_two = 0x1;
    my	$counter = 0;
    my	$end = 0;
    my	@tab_line = split '', sprintf('%0256s', '');

    $content = '';
    &header();
    &print_lineNL("const char\t*tag_to_x500[256][256][30] = {");    
    &init_hash();
    $tab_line[$prev_one] = $counter++;
    foreach my $line (@lines) {
	$line =~ s/^\#+.*$//;
	if ($line) {
	    my	@prop = split(/\s+/, $line);
	    my	$hexa = hex $prop[0];
	    my	$one = ($hexa >> 24) & 0xFF;
	    my	$two = ($hexa >> 16) & 0xFF;
	    my	$type = ($hexa) & 0xFFFF;
	    my	$tag_name = $prop[1];
	    my	$ad_name = 0;

	    $ad_name = '"'.$prop[2].'"' if (defined($prop[2]));
	    #print "$one $two $type $tag_name $ad_name\n";
	    if ($one > $prev_one) {
		&print_line(&built_line());
		&init_hash();
		$tab_line[$one] = $counter++;
		$prev_one = $one;
	    }
	    &add_x500($two, $type, $ad_name);
	    $end = $one;
	}
    }
    &print_line(&built_line());
    $tab_line[$end] = $counter++;
    &print_lineNL("\t{ {0} }\n};");
    &print_line("\n");

    return @tab_line;
}

sub	load_file()
{
    open(FILE, 'mapi-properties') or die "Can't open file\n";
    my($saved_delim) = $/;
    undef $/;
    $content = <FILE>;
    close(FILE);
    $/ = $saved_delim;
}

sub	parse($)
{
    $content = shift;

#    &load_file();
    &tab_index(&tab_name());
    &print_functions();

    return $content;
}

1;
